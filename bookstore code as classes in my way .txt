const prompt = require("prompt-sync")({ sigint: true });

class Book {
  constructor(id, title, author, price, quantity) {
    this.id = id;
    this.title = title;
    this.author = author;
    this.price = price;
    this.quantity = quantity;
  }

  display() {
    console.log(
      `Book ID: ${this.id}, Title: ${this.title}, Author: ${this.author}, Price: ${this.price}, Quantity: ${this.quantity}`
    );
  }
}

class BookStore {
  constructor() {
    this.books = [];
  }

  addBook(book) {
    if (this.books.find((b) => b.id === book.id)) {
      console.log("Book with the same ID already exists. Cannot add the book.");
    } else {
      this.books.push(book);
      console.log("Book added successfully!");
    }
  }

  updateBook(id, title, author, price, quantity) {
    const book = this.books.find((b) => b.id === id);
    if (book) {
      book.title = title || book.title;
      book.author = author || book.author;
      book.price = price || book.price;
      book.quantity = quantity || book.quantity;
      console.log("Book updated successfully!");
    } else {
      console.log("Invalid ID ... cannot update the book.");
    }
  }

  deleteBook(id) {
    const index = this.books.findIndex((b) => b.id === id);
    if (index !== -1) {
      this.books.splice(index, 1);
      console.log("Book deleted successfully!");
    } else {
      console.log("Invalid ID ... cannot delete the book.");
    }
  }

  displayBooks(query = null) {
    if (this.books.length === 0) {
      console.log("No books to display.");
      return;
    }

    if (query === null) {
      const password = prompt("Please enter the password to see all books: ");
      const correctPassword = "1234";
      if (password === correctPassword) {
        this.books.forEach((book) => book.display());
      } else {
        console.log("Incorrect password. Access denied.");
      }
    } else {
      let found = false;
      if (Array.isArray(query)) {
        query.forEach((id) => {
          const book = this.books.find((b) => b.id === id);
          if (book) {
            book.display();
            found = true;
          }
        });
      } else {
        this.books.forEach((book) => {
          if (
            book.id === parseInt(query) ||
            book.title.toLowerCase().includes(query.toLowerCase()) ||
            book.author.toLowerCase().includes(query.toLowerCase())
          ) {
            book.display();
            found = true;
          }
        });
      }

      if (!found) {
        console.log(`No book found matching the query: ${query}`);
      }
    }
  }

  sellBook() {
    const searchedBookTitle = prompt("Enter the title of the book you want: ");
    const book = this.books.find((b) =>
      b.title.toLowerCase().includes(searchedBookTitle.toLowerCase())
    );

    if (!book) {
      console.log("No book found with this title.");
      return;
    }

    const wantedQuantity = parseInt(prompt("Enter the quantity you want: "));

    if (wantedQuantity <= book.quantity) {
      const balance = parseFloat(prompt("To buy a book and receive a receipt, enter your balance: "));

      if (balance >= book.price) {
        console.log("Congrats! You got the book and here is your receipt:");
        console.log(`Title: ${book.title}, Author: ${book.author}, Price: ${book.price}, Quantity: ${wantedQuantity}`);

        book.quantity -= wantedQuantity;
      } else {
        console.log("Sorry, you don't have enough balance to buy this book.");
      }
    } else {
      console.log(`\nNot enough quantity in stock. Available quantity: ${book.quantity}`);
    }
  }
}

class BookStoreApp {
  constructor() {
    this.bookStore = new BookStore();
    this.seedBooks();
  }

  seedBooks() {
    const initialBooks = [
      new Book(1, "Start with why", "Simon Sinek", 80.0, 13),
      new Book(2, "But how do it know", "J.Clarck Scott", 59.9, 22),
      new Book(3, "Clean Code", "Robert Cecil Martin", 50.0, 5),
      new Book(4, "Zero to One", "Peter Thiel", 45.0, 12),
      new Book(5, "You don't know JS", "Kyle Simpson", 39.9, 9),
    ];

    initialBooks.forEach((book) => this.bookStore.addBook(book));
  }

  menu() {
    while (true) {
      console.log("\nWelcome to the menu of the Book Store Management");
      console.log("1. Add a book");
      console.log("2. Update a book");
      console.log("3. Delete a book");
      console.log("4. Display all books");
      console.log("5. Display specific book");
      console.log("6. Search for books");
      console.log("7. Buy a book and print a receipt");
      console.log("8. Exit");

      const choice = prompt("Choose an option from 1-8: ");

      switch (choice) {
        case "1":
          const addID = parseInt(prompt("Enter the ID for the book: "));
          const addTitle = prompt("Add the title: ");
          const addAuthor = prompt("Add the author name: ");
          const addPrice = parseFloat(prompt("Enter the price of the book: "));
          const addQuantity = parseInt(prompt("Enter the quantity of the book: "));

          this.bookStore.addBook(new Book(addID, addTitle, addAuthor, addPrice, addQuantity));
          break;

        case "2":
          const updateID = parseInt(prompt("Enter the ID to update the book: "));
          const updateTitle = prompt("Add the new title to update the book: ");
          const updateAuthor = prompt("Add the new author name to update the book: ");
          const updatePrice = parseFloat(prompt("Enter the new price of the book to update: "));
          const updateQuantity = parseInt(prompt("Enter the new quantity to update the book: "));

          this.bookStore.updateBook(updateID, updateTitle, updateAuthor, updatePrice, updateQuantity);
          break;

        case "3":
          const deleteID = parseInt(prompt("Enter the ID to delete the book: "));
          this.bookStore.deleteBook(deleteID);
          break;

        case "4":
          this.bookStore.displayBooks();
          break;

        case "5":
          const queryIDs = prompt("Enter the IDs to display (comma-separated):")
            .split(",")
            .map(Number);
          this.bookStore.displayBooks(queryIDs);
          break;

        case "6":
          const searchQuery = prompt("Enter ID, title, or author to search: ");
          this.bookStore.displayBooks(searchQuery);
          break;

        case "7":
          this.bookStore.sellBook();
          break;

        case "8":
          console.log("Exiting the program ... Goodbye!");
          return;

        default:
          console.log("Invalid option ... Please choose a valid option.");
      }
    }
  }
}

const app = new BookStoreApp();
app.menu();
